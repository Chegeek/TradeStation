[LegacyColorValue = true]; 

{*******************************************************************
Name		: splatrf.expansionwave
Description	: Find an Expansion Wave pattern
Provided By	: SplatR (c) Copyright 2013
********************************************************************}

Inputs:
	Pivots(NumericSimple),
	PM[MaxSize1, MaxSize2](NumericArrayRef),
	Strength(NumericSimple),
	Pattern[MaxSize3, MaxSize4](NumericArrayRef),
	ATRFactor(NumericSimple);

Variables:
	PatternPivots(4),
	p1(0),
	p2(0),
	p3(0),
	p4(0),
	v1(0.0),
	v2(0.0),
	v3(0.0),
	v4(0.0),
	p(0.0),
	ATR(0.0);

splatrf.expansionwave = 0;
If Pivots >= PatternPivots and Strength >= 1 Then Begin
	{Bullish ExpWave}
	p4 = splatrf.pivothigh(Pivots, PM, 0, Pivots-1, 1);
	p3 = splatrf.pivotlow(Pivots, PM, 0, Pivots-1, Strength);
	If p4 >= 0 and p3 >= 0 and
	p4 < p3 Then Begin
		v4 = High[PM[p4, 0]];
		v3 = Low[PM[p3, 0]];
		p2 = splatrf.pivothigh(Pivots, PM, p3+1, Pivots-1, Strength/2);
		If p2 >= 0 and v3 < v4 Then Begin
			v2 = High[PM[p2, 0]];
			p1 = splatrf.pivotlow(Pivots, PM, p2+1, Pivots-1, Strength/2);
			If p1 >= 0 and v2 < v4 and v2 > v3 Then Begin
				v1 = Low[PM[p1, 0]];
				If v1 < v2 and v1 > v3 Then Begin
					p = TLValueEasy(Low, PM[p3, 0], PM[p1, 0], -PM[p3, 0]);
					ATR = Volatility(PM[p3, 0]);
					Condition1 = AbsValue(p - Low) <= ATRFactor * ATR;
					Condition2 = Low < Lowest(Low, PM[p1, 0]-1)[1];
					If Condition1 and Condition2 Then Begin
						Pattern[1, 0] = PM[p1, 0];
						Pattern[1, 1] = PM[p1, 1];
						Pattern[1, 2] = PM[p1, 2];
						Pattern[1, 3] = PM[p1, 3];
						Pattern[2, 0] = PM[p2, 0];
						Pattern[2, 1] = PM[p2, 1];
						Pattern[2, 2] = PM[p2, 2];
						Pattern[2, 3] = PM[p2, 3];
						Pattern[3, 0] = PM[p3, 0];
						Pattern[3, 1] = PM[p3, 1];
						Pattern[3, 2] = PM[p3, 2];
						Pattern[3, 3] = PM[p3, 3];
						Pattern[4, 0] = PM[p4, 0];
						Pattern[4, 1] = PM[p4, 1];
						Pattern[4, 2] = PM[p4, 2];
						Pattern[4, 3] = PM[p4, 3];
						splatrf.expansionwave = PatternPivots;
					End;
				End;
			End;
		End;
	End;
	{Bearish ExpWave}
	p4 = splatrf.pivotlow(Pivots, PM, 0, Pivots-1, 1);
	p3 = splatrf.pivothigh(Pivots, PM, 0, Pivots-1, Strength);
	If p4 >= 0 and p3 >= 0 and
	p4 < p3 Then Begin
		v4 = Low[PM[p4, 0]];
		v3 = High[PM[p3, 0]];
		p2 = splatrf.pivotlow(Pivots, PM, p3+1, Pivots-1, Strength/2);
		If p2 >= 0 and v3 > v4 Then Begin
			v2 = Low[PM[p2, 0]];
			p1 = splatrf.pivothigh(Pivots, PM, p2+1, Pivots-1, Strength/2);
			If p1 >= 0 and v2 > v4 and v2 < v3 Then Begin
				v1 = High[PM[p1, 0]];
				If v1 > v2 and v1 < v3 Then Begin
					p = TLValueEasy(High, PM[p3, 0], PM[p1, 0], -PM[p3, 0]);
					ATR = Volatility(PM[p3, 0]);
					Condition1 = AbsValue(p - High) <= ATRFactor * ATR;
					Condition2 = High > Highest(High, PM[p1, 0]-1)[1];
					If Condition1 and Condition2 Then Begin
						Pattern[1, 0] = PM[p1, 0];
						Pattern[1, 1] = PM[p1, 1];
						Pattern[1, 2] = PM[p1, 2];
						Pattern[1, 3] = PM[p1, 3];
						Pattern[2, 0] = PM[p2, 0];
						Pattern[2, 1] = PM[p2, 1];
						Pattern[2, 2] = PM[p2, 2];
						Pattern[2, 3] = PM[p2, 3];
						Pattern[3, 0] = PM[p3, 0];
						Pattern[3, 1] = PM[p3, 1];
						Pattern[3, 2] = PM[p3, 2];
						Pattern[3, 3] = PM[p3, 3];
						Pattern[4, 0] = PM[p4, 0];
						Pattern[4, 1] = PM[p4, 1];
						Pattern[4, 2] = PM[p4, 2];
						Pattern[4, 3] = PM[p4, 3];
						splatrf.expansionwave = -PatternPivots;
					End;
				End;
			End;
		End;
	End;
End;
