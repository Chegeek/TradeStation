[LegacyColorValue = true]; 

{*******************************************************************
Name		: splatrf.allpivotpatterns
Description	: Draw all of the PPM patterns
Provided By	: SplatR (c) Copyright 2013
********************************************************************}

Inputs:
	Length(50),
	Strength(5),
	BullColor(White),
	BearColor(White);

Variables:
	PivotCount(0),
	LongCount(0),
	ShortCount(0),
	{Patterns}
	FibCluster(0),
	SymPivot(0),
	Gartley(0),
	Butterfly(0),
	ExpWave(0),
	ProWave(0),
	{Drawing}
	Width(1),
	Drawn(False),
	{Fibonacci Constants}
	F1(0.382),
	F2(0.500),
	F3(0.618),
	F4(0.786),
	F5(1.000),
	F6(1.272),
	F7(1.618),
	F8(2.618),
	ATRFactor(1.0);

Arrays:
	PivotMap[50, 4](0),
	Pattern[5, 4](0),
	SavedPattern[5, 4](0);

PivotCount = 0;
LongCount = 0;
ShortCount = 0;

{Find Pivots}

PivotCount = splatrf.pivotmap(Length, 50, PivotMap);

If PivotCount > 0 Then Begin
	
{Fibonacci Cluster}
	
FibCluster = splatrf.fibcluster(PivotCount, PivotMap, Strength, Pattern, F2, F3, F4);
If FibCluster <> 0 Then Begin
	If splatrf.samepattern(FibCluster, Pattern, SavedPattern) = False Then Begin
		If FibCluster > 0 Then Begin
			Drawn = splatrf.drawpattern(FibCluster, Pattern, BullColor, Width, "F");
			LongCount = LongCount + 1;
		End Else Begin
			Drawn = splatrf.drawpattern(FibCluster, Pattern, BearColor, Width, "F");
			ShortCount = ShortCount + 1;
		End;
		Condition1 = splatrf.copypattern(FibCluster, Pattern, SavedPattern);
	End;
End;

{Symmetric Pivot}

SymPivot = splatrf.symmetricpivot(PivotCount, PivotMap, Strength, Pattern);
If SymPivot <> 0 Then Begin
	If splatrf.samepattern(SymPivot, Pattern, SavedPattern) = False Then Begin
		If SymPivot > 0 Then Begin
			Drawn = splatrf.drawpattern(SymPivot, Pattern, BullColor, Width, "S");
			LongCount = LongCount + 1;
		End Else Begin
			Drawn = splatrf.drawpattern(SymPivot, Pattern, BearColor, Width, "S");
			ShortCount = ShortCount + 1;
		End;
		Condition1 = splatrf.copypattern(SymPivot, Pattern, SavedPattern);
	End;
End;

{Gartley}

Gartley = splatrf.gartley(PivotCount, PivotMap, Strength, Pattern, F3);
If Gartley <> 0 Then Begin
	If splatrf.samepattern(Gartley, Pattern, SavedPattern) = False Then Begin
		If Gartley > 0 Then Begin
			Drawn = splatrf.drawpattern(Gartley, Pattern, BullColor, Width, "G");
			LongCount = LongCount + 1;
		End Else Begin
			Drawn = splatrf.drawpattern(Gartley, Pattern, BearColor, Width, "G");
			ShortCount = ShortCount + 1;
		End;
		Condition1 = splatrf.copypattern(Gartley, Pattern, SavedPattern);
	End;
End;

{Butterfly}

Butterfly = splatrf.butterfly(PivotCount, PivotMap, Strength, Pattern, F6);
If Butterfly <> 0 Then Begin
	If splatrf.samepattern(Butterfly, Pattern, SavedPattern) = False Then Begin
		If Butterfly > 0 Then Begin
			Drawn = splatrf.drawpattern(Butterfly, Pattern, BullColor, Width, "B");
			LongCount = LongCount + 1;
		End Else Begin
			Drawn = splatrf.drawpattern(Butterfly, Pattern, BearColor, Width, "B");
			ShortCount = ShortCount + 1;
		End;
		Condition1 = splatrf.copypattern(Butterfly, Pattern, SavedPattern);
	End;
End;

{Expansion Wave}

ExpWave = splatrf.expansionwave(PivotCount, PivotMap, Strength, Pattern, ATRFactor);
If ExpWave <> 0 Then Begin
	If splatrf.samepattern(ExpWave, Pattern, SavedPattern) = False Then Begin
		If ExpWave > 0 Then Begin
			Drawn = splatrf.drawpattern(ExpWave, Pattern, BullColor, Width, "E");
			LongCount = LongCount + 1;
		End Else Begin
			Drawn = splatrf.drawpattern(ExpWave, Pattern, BearColor, Width, "E");
			ShortCount = ShortCount + 1;
		End;
		Condition1 = splatrf.copypattern(ExpWave, Pattern, SavedPattern);
	End;
End;

{Projected Wave}

ProWave = splatrf.projectedwave(PivotCount, PivotMap, Strength, Pattern, ATRFactor);
If ProWave <> 0 Then Begin
	If splatrf.samepattern(ProWave, Pattern, SavedPattern) = False Then Begin
		If ProWave > 0 Then Begin
			Drawn = splatrf.drawpattern(ProWave, Pattern, BullColor, Width, "P");
			LongCount = LongCount + 1;
		End Else Begin
			Drawn = splatrf.drawpattern(ProWave, Pattern, BearColor, Width, "P");
			ShortCount = ShortCount + 1;
		End;
		Condition1 = splatrf.copypattern(ProWave, Pattern, SavedPattern);
	End;
End;

{Pattern Counts}

Plot1(LongCount, "Longs");
Plot2(ShortCount, "Shorts");

End;
